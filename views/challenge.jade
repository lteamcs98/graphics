doctype html
html
	head
		title Challenge #{challengeId}

		link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Montserrat')
		link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Lato')

		link(rel='stylesheet', href='../css/codemirror.css')
		link(rel='stylesheet', href='../css/light-table.css')
		link(rel='stylesheet', href='../css/lint.css')
		link(rel='stylesheet', href='../css/normalize.css')
		link(rel='stylesheet', href='../css/style.css')

		script(src='//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js')
		//script(src='http://interactiveclassroom.herokuapp.com/socket.io/socket.io.js')
		script(src="../socket.io/socket.io.js")
		script(src='../js/codemirror.js')
		script(src='../js/javascriptLint.js')
		script(src='../js/javascript.js')
		script(src='../js/jshint.js')
		script(src='../js/lint.js')

	body

		div(class='grid grid-pad')
			div(class='col-1')
				h2 Challenge #{challengeId}: #{title}
				p #{problem}

			// Code editor for challenge
			div(class='col-2-3 row-1-2')
				textarea(id='editor')
				button(class='button' id='emailButton' type='button') Email
				button(class='button' id='submitButton' type='button') Submit
			div(class='col-1-3 row-1-2')
				// Select individual functions to run unit tests on
				select(id='codeUnitList')
					option
						selected
						value='All'
				// Results pane shows how challenge submission performs on
				// test cases
				div(id='results')
					h2 Results

			div(class='col-1' id='console')
				h2 Console

		script(src='../js/consoleCapture.js')
		script(src='../js/evaluateSubmission.js')
		script(src='../js/codeMirrorResize.js')
		script.
			// set the source link for the socket.io connection
			var socket = io.connect(ROOT_URL);

			// variables passed from the server (routes/challenge.js) to the jade template

			// Array of output values for testing user submissions
			var outputArray = !{ JSON.stringify(outputArray) };

			// Array of input values for testing user submissions
			var inputArray = !{ JSON.stringify(inputArray) };

			// The ID associated with this challenge
			var challengeId = Number(#{challengeId});

			// The names of the functions associated with this challenge
			var functionNames = !{ JSON.stringify(functionNames) };

			// Add the name of each function to be tested to the dropdown menu for unit testing
			addFunctionOptions(functionNames);

			// Function headers that are used as placeholders in the editor
			var functionHeaders = !{ JSON.stringify(functionHeaders) };

			// Load previous submission by this user into the code editor
			editor.setValue(!{JSON.stringify(oldSub)});

			/* Set callback for submit button. When this button clicked, test
			code submitted with test cases defined for this challenge. Load
			the result (% tests passed) into the results frame for user
			to view and save the result to submissions database. */
			$('#submitButton').click(function() {
				// Refresh the results div with just the header
				$('#results').html('<h2>Results</h2>');

				// Reset the input array
				inputArray = !{ JSON.stringify(inputArray) };

				var testIndex = document.getElementById("codeUnitList").selectedIndex;

				var testAll = (testIndex === 0);
				var functions = new Array();
				if (testAll)	// "All" selected, test all functions defined
				{
					functions = functionNames;
				} else          // Test the function selected in unit test box
				{
					functions.push(document.getElementById("codeUnitList").options[testIndex].value);
				}

				totalTests = 0;
				correctTests = 0;
				var failedTests = new Array();
				for(var i in functions)
				{
					// Test and return results = [number of tests, ...
					//   number of tests passed, failed tests'
					result = evaluateFunction(functions[i]);
					if(typeof result == 'number')
					{
						continue;
					}
					totalTests += result[0];
					correctTests += result[1];
					failedTests.push({functionName: functions[i], failedTests: result[2]});
				}

				// Show test outcome to user in browser
				if(totalTests > 0)
				{
					var percent = (100.0 * correctTests / totalTests);
					$('#outputBox').append('<p class="challengeTitle">' + percent + "% Correct</p>");
				}
				else
				{
					$('#outputBox').append('<p class="challengeTitle">No results to display</p>');
				}

				// Send data back to server to save in submissions database
				socket.emit('results', {
						challengeId: !{challengeId},
						challengeName: "#{challengeName}",
						userCode: editor.getValue(),
						userId: !{personsID},
						personsName: "#{theirName}",
						firstName: "#{firstName}",
						lastName: "#{lastName}",
						userPercent: percent
					}
				);

			});

			// Email button callback - allow user to email code to themselves
			$('#emailButton').click(function() {
				var personsCode = editor.getValue();
				personsCode = personsCode.replace(/\n/g, '%0D%0A');
				personsCode = personsCode.replace(/\t/g, '    ');
				var personsSubject = #{title}

				window.open(
					'mailto:first.middle.last.year@dartmouth.edu?'
					+ '&subject=Challenge ' + #{challengeId}
					+ '&body=' + personsCode
				);
			});
