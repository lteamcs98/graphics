# Review for Final Exam

## Ground rules

The final exam will be on Sunday, March 11 at 11:30 am in 008 Kemeny.
**Note that the exam will take place where we have our lectures, *not*
where the other two exams were held!!!**

Sunday, March 11 at 11:30 am will be the *only* time that the final
exam will be offered.  If you cannot take it at that time, then unless
you have documentation from your dean explaining why you were unable
to take the exam then, you will get a score of 0 for the final exam.

You will have up to three hours to take the final exam.

**Also note that daylight savings time starts on March 11.  You should
set your clock *ahead* one hour by 2:00 am on March 11.  If you forget
to do so, you will be one hour late on March 11.  If you arrive at the
exam after 11:30 am, you will be required to complete it by 2:30 pm,
regardless of the reason that you arrived late.**

As in the other two exams, you may bring a **crib sheet** to the exam,
subject to the following restrictions.  The crib sheet must be a
single sheet of paper, 8 1/2 inches by 11 inches at the largest.  You
may write on both sides of the sheet.  You may write whatever you
like.  But everything on the sheet must be written by you, by hand,
and directly onto the sheet.  Photocopying is specifically disallowed.
You will hand in your crib sheet with the exam, and you will get it
back with the graded exam.  The crib sheet will in no way affect the
grading of the exam.

## Review session

There will be an open review session on Thursday, March 8, 10:00 am to
12:00 noon, in 008 Kemeny.  Attendance is completely at your option.
Come for as much or as little of it as you like.  There is no lesson
planned for this session; I will just answer all questions.

## Getting questions answered

From the end of the review session on March 8 until the morning of
March 11, I will have spotty Internet access.  If you have questions
you want me to answer, make sure to ask them by 12:00 noon on March 8.

After 12:00 noon on March 8, you may send questions to the cs1help
email address, but I cannot guarantee that they will be answered.

## Results and grades

Since we won't be able to return the final exam in class, I will
announce via a email to the entire class when the final exams have
been graded and the final grades have been determined.  I expect this
to be some time during Monday, March 12. You will find your final exam
grade on the course Blackboard site once I have sent out the
announcement.  You may also come by my office any time after the
announcement to pick up your exam.  I will keep the exams until the
end of the Fall 2012 term, so if you're going to be away from campus
until then, you have the option of picking up your exam when you
return.

To see your final *course* grade on Blackboard, you must first submit
a course evaluation for CS 1.  I have no way to check that you have
submitted an evaluation, however.  Therefore, we will use the
following honor system: If you send me an email telling me that you
have either submitted a course evaluation or explicitly opted out (you
do both through bannerstudent), I will take you at your word, and I
will post your final course grade on Blackboard.

One the luxuries of Blackboard is that you can see exactly the grades
that we have recorded for you.  **If you believe that any of the
recorded grades are incorrect and you want me to correct them, you
must bring the problem to my attention *before the start of the final
exam*.  Bring whatever documentation you have that demonstrates we
have the wrong grade recorded for you.  Once the final exam starts,
the grades that we have recorded for you will stand.**

## Exam format and material

You should know material from the entire course.  Some of the
questions will focus on material that we've covered since the second
exam, but you should be able to answer questions and write Python code
that pertains to any part of the course.

I do not expect you to memorize any particular pieces of code.  I *do*
expect you to know how to work with Python classes, lists, and
dictionaries, and I expect you know how to work with linked lists.

Don't forget that you can link to the official course lecture notes
for each lecture from the [schedule page](../schedule.html).

Read each question carefully and answer **everything** asked of you.
Please please please read each question **carefully**.  Many students
have lost points on past exams simply because they did not read the
questions carefully.

The exam will have a few short-answer questions and a few longer
questions that may ask you to write some Python code.

## Sample questions

Questions like these have appeared on a previous final exam.  Note
that I did not write any of these questions, so they won't be just
like the ones on this term's exam.  And, as I always remind you: **Do
not interpret the following as a *full practice exam*!!**

1.  Imagine that we will use a breadth-first search to find a path
from node A to node D on the graph below.  List the operations that
occur during the breadth-first search.  For example, at some point in
the search, you might have a line like "add X and Y to the queue,"
where X and Y are the names of nodes.  *When adding adjacent nodes to
the queue, add nodes in alphabetical order.* Include operations such
as adding a node to `visited`, and indicate when a back-pointer is
created, and to which node.  The last item popped from the queue
should be D.  When done, show the backchaining process to find a path
from A to D.

    (Hint: When writing the operations, it may be helpful to you to draw
backpointers on the picture of the graph, and keep a list of items in
the queue as items are pushed and popped.  You may also want to draw
and keep updated a representation of `visited`.  Such pictures are
also a good way to get partial credit.)

    ![](graph.png)

2.  Here is a table of binary representations of a few different letters.

    Character           Binary representation
    --------- - - - - - ---------------------
    A                   `01000001`
    E                   `01000101`
    F                   `01000110`
    I                   `01001001`
    N                   `01001110`
    R                   `01010010`
    W                   `01010111`

    You have intercepted a secret message and also intercepted the
one-time pad that was used to encrypt the message:

    <pre>
    encrypted message: 10000010 11100010 10010101 10101010 01111111 11111101
         one-time pad: 11010101 10101011 11011011 11100100 00111010 10101111
    </pre>

    Decrypt the message: Write down the bits of the original
plaintext.  Describe the procedure you use to do the decryption.  Then
use the table above to convert the unencyrpted bits into the original
string of characters.

3.  You are given the address of the first node in a linked list
containing $n$ items.  Using big-Oh notation, give the running time to
find the node that is at the midpoint of the list (for simplicity,
assume that $n$ is odd).  Explain.

4.  You are given the addresses of both the first and last nodes in a
*singly* linked list containing $n$ items.  Because the list is singly
linked, each node has the address of the node that follows it, but not
the address of the previous node.  Describe how you could find the
address of the second-to-last node in the list.  What is the running
time of this operation?

5.  You are given the addresses of sentinel nodes of two doubly linked
lists.  `lista` has $n$ items, and `listb` has $m$ items.  Suppose
that you need a list `listc` that contains all the items of `lista`
followed by all of the items of `listb`.  What is the running time for
the fastest algorithm to create `listc`, assuming that $m$ and $n$ are
large?  Very briefly describe the main idea of your algorithm (you do
not have to write any code).

6. Given the search term `woowow`,

    a. Draw a finite automaton that would allow a text string to be
    searched for all occurrences of the search term.

    b. Write the transition table for the finite automaton.  Assume
that the only two symbols in the alphabet are `o` and `w`.  (Hint: the
table should have seven rows, one for each of the states of the finite
automaton.)
