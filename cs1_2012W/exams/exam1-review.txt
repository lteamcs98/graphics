# Review for Exam 1

## Ground rules

The first exam will be on Thursday, January 26 at 6:00 pm in Life
Sciences Center, Room 100 (Oopik Auditorium).  **Note that the exam
will take place at a location other than where we have our
lectures!!!**

You will have up to three hours, but the exam is designed to take much
less than three hours.

**If you cannot take the exam at 6:00 pm on January 26, you must
contact me by email by 5:00 pm on Monday, January 23.** If you do not
contact me by then, I will require you to take the exam at 6:00 pm on
Thursday.  *No exceptions.* Note that even if you have told me
previously that you cannot take the exam at 6:00 pm on Thursday, you
should contact me again.  I might not remember something you told me
two or three weeks ago.

You may bring a **crib sheet** to the exam, subject to the following
restrictions.  The crib sheet must be a single sheet of paper, 8 1/2
inches by 11 inches at the largest.  You may write on both sides of
the sheet.  You may write whatever you like.  But everything on the
sheet must be written by you, by hand, and directly onto the sheet.
Photocopying is specifically disallowed.  You will hand in your crib
sheet with the exam, and you will get it back with the graded exam.
The crib sheet will in no way affect the grading of the exam.

We expect to have the graded exams back to you in lecture the next
day.

## Regrading policy

If we made a mistake in adding up points, please bring it to my
attention.  I will correct it and update your grade in the Blackboard
Grade Center.

If you think that we graded you unfairly, I will cheerfully regrade
your entire exam upon request.  Notice that what I will regrade is
*not just the question that you think we graded unfairly.* I will
regrade *the entire exam*.

I have this policy for a sound educational reason.  You will get the
official solutions back with your exam.  You will have the official
solutions, and you will have your exam.  You should look over your
exam and see whether there were questions on which perhaps you
received credit that you should not have received.  In other words,
you should look over both your exam and the official solutions
carefully.

It is possible to end up with fewer points after regrading.  In fact,
it happened many times in CS 5.  There were even CS 5 exams where
almost every regrade resulted in a lower score.  So you should be
confident of your solutions before you ask for a regrade.

## Review session

There will be an open review session on Thursday, January 26 during
our x-hour.  Attendance is completely at your option.  Come for as
much or as little of it as you like.  There is no lesson planned for
this session; I will just answer all questions.

## Exam format

Read each question carefully and answer **everything** asked of you.
Please please please read each question **carefully**.  Many students
have lost points on past exams simply because they did not read the
questions carefully.

The exam will have a few short-answer questions and a few longer
questions that may ask you to write some Python code.

## What you should know

I will expect you to know everything we have covered up through and
including the material we cover in lecture on selection sort.

Don't forget that you can link to the official lecture notes for each
lecture from the [schedule page](../schedule.html).  You want to read
these notes.  They contain the information that I think is important.
That's what I'll be testing you on.

## Suggested strategy

I suggest the following strategy when taking this exam:

1. Read over the entire exam.
       
2. Answer the questions in the order in which you feel most
comfortable.

3. Take a short break.  Maybe leave the room.  Maybe even go outside
and get a little fresh air.

4. Come back and look over your exam carefully and critically.  Have
you answered all the questions as completely as you can?  Are your
answers correct?  Have you done something foolish, such as using
uninitialized variables?  Are your answers written neatly enough that
your grader will be able to read them?

5.  Hand it in.

6.  Go have fun.  I only ask that you do so far enough from the exam
location so as to not taunt your classmates who are still working on
the exam.

## Sample questions

Questions like these have appeared on previous exams.

These questions are **representative of the type that may appear on
the exam**.  **Do not interpret the following as a *full practice
exam*!!**

1. For each part of the question, I will provide some Python code.
Tell me exactly what will be printed on the screen.  Sometimes I'm
tricky.  Read and work through the code carefully, observing the exact
values in the code.  If there is an error in the code that would
prevent output, very briefly describe the error.

    a. `print 5 + 9 < 18`

    b. `from math import pi` \
       `print pi == 3.14159`

    c. `x = 12` \
       `y = 6` \
       `print not (x > y)`

    d. `print not False or not True`

    e. `def do_something():` \
       \ \ \ \ \ \ `i = 0` \
       \ \ \ \ \ \ `while i < 10:` \
       \ \ \ \ \ \ \ \ \ \ \ \ `print "Something."` \
       `do_something()`

    f. `def yoda1():` \
       \ \ \ \ \ \ `print "Do or do not."` \
       \ \ \ \ \ \ `return False` \
       `def yoda2():` \
       \ \ \ \ \ \ `print "There is no try."` \
       \ \ \ \ \ \ `return True` \
       `print yoda1() and yoda2()`

    g. `def print_list():` \
       \ \ \ \ \ \ `global i` \
       \ \ \ \ \ \ `print mylist[i]` \
       \ \ \ \ \ \ `i = i + 3` \
       `i = 0` \
       `mylist = ["four", "score", "and", "seven", "years", "ago"]` \
       `print_list()` \
       `print_list()` \
       `print_list()`

2. The following code correctly selection-sorts a list, but the style
is awful.  Describe (in words) what is wrong with the code, and list
several ways in which the code could be improved.

	`def a(b):` \
	\ \ \ \ \ \ `for z in range(len(b)):` \
	\ \ \ \ \ \ \ \ \ \ \ \ `q=b[z]` \
	\ \ \ \ \ \ \ \ \ \ \ \ `k=z` \
	\ \ \ \ \ \ \ \ \ \ \ \ `for j in range(z,len(b)):` \
	\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ `if b[j]<q:` \
	\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ `q=b[j]` \
	\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ `k=j` \
	\ \ \ \ \ \ \ \ \ \ \ \ `c=b[z]` \
	\ \ \ \ \ \ \ \ \ \ \ \ `b[z]=q` \
	\ \ \ \ \ \ \ \ \ \ \ \ `b[k]=c` \
	`g = [89,45,85,81,77,94,22,79,92,91]` \
	`a(g)` \
	`print g`

3.  A *palindrome* is a word or a sentence that is the same spelled
backwards or forwards.  If we had a function `is_palindrome` to test
whether a string is a palindrome, we would expect the following code
to print out `True` three times:

   	 `print is_palindrome("mom")` \
	 `print is_palindrome("wow")` \
	 `print is_palindrome("refer")`

    a.  Write the function `is_palindrome` that takes a string as a
parameter and returns a boolean value `True` or `False`, indicating
whether the parameter is a palindrome.  You may assume that the
parameter does not have spaces or punctuation and that all of its
letters are lowercase.  *Hint:* Remember that you can index into a
string to get a letter using square-bracket notation, almost as though
the string were a list.

    b.  Here are two calls to a function `is_sentence_palindrome`,
both of which return `True`:

        `print is_sentence_palindrome("a man, a plan, a canal: panama.")` \
	`print is_sentence_palindrome("are we not drawn onward,` \
	\ \ \ \ \ \ `we few, drawn onward to new era?")`

	Write the function `is_sentence_palindrome`, which returns
`True` if just the letters of its string parameter are a palindrome,
and `False` otherwise.  You may assume that all letters are lowercase,
and you may assume that you already have (and can call) the function
`is_palindrome` that can test whether a single word is a palindrome.
For this part of the question, we will assume that `is_palindrome`
works correctly even if your answer to part (a) is flawed.

	*Hint:* Here is an approach.  Loop over the the string to
create a new list containing only the letters of the string, without
spaces or punctuation.  You can check determine whether a string of
length 1 is a letter if the string is greater than or equal to `"a"`
and less than or equal to `"z"`.  You can then pass the created list
to `is_palindrome` as a parameter.  Don't forget to return the result.

4. The *Fibonacci sequence* is a sequence of integers starting with 1, 1.
Each new number is the sum of the two previous numbers, so that the
first terms of the sequence are

    1, 1, 2, 3, 5, 8, 13, &hellip;

    a.  Write a function `print_fibonacci` that takes one parameter
    `n` and prints out the first `n` Fibonacci numbers.  Your function
    should not use a list.

    b.  Write a function `fibonacci_list` that takes one parameter `n`
and creates and returns a list of the first `n` Fibonacci numbers.

5. In this question, you will draw a checkerboard and some checkers.

    a. Write a function to draw a checkerboard on the screen, like this:

        ![](checkerboard.png)

        The squares alternate colors between red and black, with the
        topmost left square drawn in red.  The checkerboard has 8 rows
        and 8 columns.  Each square is 40 pixels wide and high.
        Define constants as appropriate.  Draw each square as a
        rectangle with no outline.  Use loops, so that your program
        contains only one or two calls to draw_rectangle, and not 64
        separate calls.

        Hint: To determine whether a square should be red or black,
        observe that if the row number and the column are either both
        even or both odd, then the square is red.  If one is even and
        the other is odd, then the square is black.  Think about what
        it means to test whether the row number and column are both
        even or both odd.  There is a simple way to express this
        condition in Python.

        You may assume that this function is to be supplied as a
        parameter to `start_graphics`.

    b.  On top of the checkerboard, draw the checkers in the initial
        position for a checkers game, like this:

        ![](checkers.png)

        The top three rows contain the black checkers, and the bottom
        three rows contain the red checkers.  Checkers are placed only
        on black squares.  Draw each checker as a filled circle with a
        white outline.  The diameter of each checker should be 10
        pixels less than the size of each square.
