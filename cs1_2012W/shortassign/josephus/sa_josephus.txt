# Short Assignment #11: The Josephus Problem \
Due: Friday, February 17

The general Josephus, whose band of 40 soldiers (plus himself) was
once faced with certain defeat, proposed the following scheme for the
remnants of his army to die honorably by their own hands.  He arranged
himself and his soldiers in a circle.  Then, beginning with a
particular soldier, they kept counting around in the circle and
killing every other **remaining** soldier until only one remained.
Josephus proposed that this last soldier then commit suicide.  But he
cleverly arranged to be that last soldier himself and slipped away
under cover of darkness.

You are to write a program to aid Josephus in figuring out where to
stand in the circle.  The program should read from the console window
two numbers: the number of soldiers $n$ and the number $k$ skipped
between successive executions.  $n$ should be at least 2, and $k$
should be between 1 and $n$, inclusive.  The program should then print
out the execution order of the soldiers and the last soldier alive.
Therefore the "classical" problem would have $n = 41$ (Josephus and 40
followers) and $k = 2$ (every second soldier dies).  For $n = 5$ and
$k = 2$, the order of death would be 2, 4, 1, 5, 3, and so Josephus
should stand in position 3.  For input pair $n = 8$ and $k = 4$, the
order would be 4, 8, 5, 2, 1, 3, 7, 6.  Note that the first soldier to
die is always soldier number $k$.  We call the output a
**permutation** of the numbers 1, 2, &hellip;, $n$; that is, the
output is some rearrangement of the first $n$ integers.

Your program should create a circular, doubly linked list using
references to maintain the links.  **Do not use a sentinel in your
circular list.** (Even though we used a sentinel in the circular
linked list in class, there is no rule that all circular lists must
contain a sentinel.)  You can then run around the circle killing off
soldiers by removing them from the circular list.

You will probably want to create two classes: one for individual
soldiers (like the `Node` class from lecture), and one for the circle
of soldiers (like the `Sentinel_DLL` class from lecture, but without
the sentinel).  You may name these classes whatever you like, and
write whatever methods you like.  You may also put these classes,
along with the code that sets everything up and simulates the killing,
in a single .py file.  (That is, you don't have to make a separate .py
file for each class.)

For context, here are the classes and methods that I made.  *You do
not have to write your program the same way that I did.  This is
merely a suggestion, nothing more, nothing less.*

* I made a class `Soldier`, representing an individual soldier.  Each
`Soldier` object had instance variables for a number (1 through $n$)
and references to the next and previous `Soldier` object in the
circle.  Methods: `__init__` and `kill`.  `__init__` takes a number as
a parameter, and `kill` takes two strings, a prefix and a suffix to
print, surrounding the soldier's number, when the soldier is killed.

* I made a class `Army`, representing the circle of soldiers.  The
`Army` had two instance variables: one counting how many soldiers
remain alive, and one referencing the current victim `Soldier` object.
Methods: `__init__`, `advance`, and `kill_all`.  `__init__` takes the
total number of soldiers as a parameter, and it creates all the
`Soldier` objects and makes them into a circular, doubly linked list,
with the current victim being one of them.  `advance` takes a number
as a parameter and advances the current victim by that many remaining
soldiers.  `kill_all` kills all the soldiers.

Generate runs for the following inputs:

> $n = 5$, $k = 2$ \
> $n = 16$, $k = 3$ \
> $n = 41$, $k = 2$

Turn these in with your source code.

Here is the output of my program for $n = 5$ and $k = 2$:

~~~
Enter number n of soliders, at least 2: 5
Enter spacing between victims, between 1 and n: 2
Soldier 2 buys the farm 
Soldier 4 buys the farm 
Soldier 1 buys the farm 
Soldier 5 buys the farm 
The last remaining soldier is 3  
~~~

And here is the beginning and end of my output for $n = 41$ and $k =
2$:

~~~
Enter number n of soliders, at least 2: 41
Enter spacing between victims, between 1 and n: 2
Soldier 2 buys the farm 
Soldier 4 buys the farm 
Soldier 6 buys the farm 
Soldier 8 buys the farm 
Soldier 10 buys the farm 
...
Soldier 27 buys the farm 
Soldier 3 buys the farm 
Soldier 35 buys the farm 
The last remaining soldier is 19  
~~~

### Historical note

According to the Encyclopedia Brittanica, Flavius Josephus was a
Jewish priest, scholar, and general.  He was military commander of
Galilee in 66 A.D. and held the fortress of Jotapata against the
Romans for 47 days.  After the city fell he took refuge with 40
followers in a nearby cave.  The followers voted to commit suicide
rather than surrender.  Josephus disagreed with the decision but
feared that he would be murdered if he made his views known.
Therefore, he argued that because suicide was immoral, the men should
stand in a circle and that each man in turn should kill the man next
to the one next to him, around and around the circle, until only one
man was left, and then only that man would have to kill himself.  He
then cleverly arranged to be the last man alive and surrendered to the
Romans.  (If you want historical accuracy, Josephus also convinced the
second-to-last man to surrender rather than be killed, and Brittanica
says only that the order was chosen "by lots.")
