# Short Assignment #4:  String Art \
Due: Wednesday, January 18

## Problem 1:  Using the debugging tool

I showed you how to use the Eclipse debugging tool in [Lecture
5](../lectures/lecture05/lecture05.html).  Load your solution for
Problem 1 in [Short Assignment 3](../shortassign/sa03.html) into
Eclipse.  Open the debugging perspective, set a breakpoint, and step
through your program until it is about to execute the first statement
in loop body for the year 3 A.D.  At that point, the balance should be
what it was at the end of year 2, namely 1.1025.  Now take a
screenshot and save it as `debug_practice.xxx` (where xxx is png, or
tiff, or jpg, or bmp, etc.).  We should be able to see the values of
variables used in the loop in the upper right corner of your screen.
Submit this screenshot with your short assignment.

## Problem 2:  String Art

Note: The instructions are a bit lengthy and picky.  Please read all
requirements, and do some thinking before you start coding.  It's also
good practice to see if you can do some coding with pencil-and-paper
before typing anything into Eclipse.  (After all, exams will be
pencil-and-paper, without Eclipse.)  Once you understand exactly what
you want to do, implement your code in Eclipse piece-by-piece and test
each piece as you go.

In this short assignment, you will write a function that allows you to
draw "string art": art made out of, you know, string.  If you've never
seen string art, a quick [search of Google
images](http://www.google.com/search?q=string+art&hl=en&client=safari&rls=en&prmd=imvns&tbm=isch&tbo=u&source=univ&sa=X&ei=eeWETvXoCsqyhAfblcjnDA&ved=0CGMQsAQ&biw=1216&bih=777)
will give some inspirational examples.  Here's what I came up with in
my solution:

![](stringart-smoothed.png)

Here's how real string art (in the physical world) works.  You take
two long thin pieces of wood.  Let's say they are yardsticks, with 36
inch marks on them.  On each yardstick, push in 37 thumbtacks, at
one-inch intervals along the stick (at inch 0, inch 1, inch 2, and so
on, up through inch 36).  Lay the sticks on the ground with the tacks
facing up.  Call the sticks *A* and *B*.  Attach a taut piece of
string from the tack 0 inches along stick *A*, to the tack 36 inches
along stick *B*.

Then attach another string, this time from 1 inch along stick *A*, to
35 inches along stick *B*.  And then another, from 2 inches along
stick *A*, to 34 inches along stick *A*.  Keep following this pattern
until every tack on stick *A* is attached to a tack stick *B* by a
piece of taut string.

## Requirements

Write a function that takes nine input parameters, in the following
order:

* the *x* and *y* coordinates of one end of stick *A*,
* the *x* and *y* coordinates of the other end of stick *A*,
* the *x* and *y* coordinates of one end of stick *B*,
* the *x* and *y* coordinates of the other end of stick *B*,
* the number of strings.

You may name these parameters whatever you like.  The function should
draw string art using those two sticks as described above.  For
example, in my program, the actual parameters I passed to the function
were 25, 50, 50, 200, 350, 180, 200, 350, 25.  You may use whatever
colors you like, but the strings and the sticks should not have the
same color.

Draw everything on a black background, as I have done.  You should
draw the sticks with a stroke width of 3 pixels, but draw the strings
with a stroke width of 1 pixel.  Also, make sure to call the
parameterless function `enable_smoothing` before drawing anything.
Otherwise, you'll get a jaggy drawing like this one:

![](stringart-jaggy.png)

You do not have to make the string colors vary from string to string,
but you are welcome to do so.  If you want to change the string
colors, a nice way to do it is to gradually change the red/green/blue
values as you progress from one string to the next.  (In my string
art, I changed only the green and blue values.)

As you know, when you call `start_graphics`, you pass it the name of a
function as a parameter, and `start_graphics` runs that function.  One
problem: the function passed to `start_graphics` must take no
parameters.  In other words, if you were to call
`start_graphics(do_stuff)`, then `do_stuff` must be a function that
takes no parameters.  But the function that draws the string art does
not take no parameters; in fact, it takes nine of them.  So you cannot
pass this function's name as a parameter when you call
`start_graphics`.

Here's how you can solve this problem.  Write a function `main` that
takes no parameters.  All that `main` does is call your nine-parameter
function.  Then pass `main` as the parameter when you call
`start_graphics`.

You may optionally change the colors in some creative way as the
string art is being drawn, by incrementally changing the red, green,
and blue components of the current drawing color.

Do not forget to use beautiful coding style, with good comments, good
use of whitespace, and meaningful variable names.  

## Hints

Simplify the problem and solve a small piece first.

1. It's easy to draw the two sticks, right?  Do that first and test
your program.

2. Now you have to draw several more lines, representing the pieces of
string.  For each piece of string, you'll have to figure out the *x*-
and *y*-coordinates of the line endpoints, where they are attached to
the "tacks" on the sticks.  Here's how.

    Let `x1a` and `y1a` be the coordinates of one end of stick *A*,
and let `x2a` and `y2a` be the coordinates of the other end.  For
stick *B*, let the coordinates be `x1b`, `y1b` and `x2b`, `y2b`.  The
first string will go from `(x1a, y1a)` to `(x2b, y2b)`, and the last
string will go from `(x2a, y2a)` to `(x1b, y1b)`.

    Now suppose that you want to draw a string that is a fraction `f`
of the way from the first string, where `f` is between 0 and 1,
inclusive.  In other words, where it hits stick *A* should be `f` of
the way from `(x1a, y1a)` toward `(x2a, y2a)`, and where it hits stick
*B* should be `f` of the way from `(x2b, y2b)` toward `(x2a, y2a)`.
Then the *x*-coordinate of where it should hit stick *A* would be
`x1a + f * (x2a - x1a)`, and the *x*-coordinate of where it should hit
stick *B* would be `x1b + (1.0 - f) * (x2b - x1b)`.  I'll let you
figure out the *y*-coordinates, but they're a lot like the
*x*-coordinates.

    The fraction `f` depends on which string you're drawing.  Let's
take a simple example.  Suppose that you are to draw five strings.
Then you want to compute coordinates five times, first for `f` = 0,
then for `f = 0.25`, then for `f` = 0.5, then for `f` = 0.75, then for
`f` = 1.0.  If instead you are drawing nine strings, you'll use
successive values of `f` as 0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75,
0.875, and 1.0.  I'll let you figure out how to perform this
calculuation, but notice that the change in `f` from one string to the
next is *not exactly* 1 over the number of strings.  If it were 1 over
the number of strings, then for five strings, `f` would change by 0.2
from string to string, but the right change is 0.25.

3. Instead of going right to drawing the strings after drawing the
sticks, you might want to first draw tacks at the attachment points on
the sticks.  In other words, before trying to draw the strings, just
draw tiny circles at the attachment points, in a color other than the
color of the sticks.  Then, once you're satisfied that you've got the
attachment points right, modify the program to draw the strings and
not the tacks.

4. You should be able to write this program with one while-loop.  I
don't mean that your program should consist of just one while-loop and
nothing more.  I mean that the number of while-loops in your program
should be one.  You also shouldn't need any if-statements.

5. If you want to vary the colors of the strings, as I did, that
fraction `f` is useful when you calculate the red, green, and blue
values.

## What to turn in

1. A screenshot of your debugging run from Problem 1.

2. The Python program for your string art.

3. A screenshot to show the output.

You may submit several programs and their corresponding outputs for
different string arts.  But only one program and its output are
required.

Please remember in all assignments that editing the output of the
program before printing it is a violation of the Academic Honor
Principle.  Make sure that the output you turn in comes from the
program that you turn in.  If you make any change to the code, no
matter how insignificant you think it might be, rerun your program to
produce new output.

## How to turn in your assignment

You have a section leader.  That section leader has a special e-mail
account

cs1-xxx@cs.dartmouth.edu

where xxx will be replaced with your section leader's first name.  So
for example, if your section leader is Bertha, then e-mail
cs1-bertha@cs.dartmouth.edu.  You can find this email account in the
Recitation Sections area on the course [Blackboard
site](https://blackboard.dartmouth.edu/).

Send your section leader an e-mail with the title "Short assignment 4
submission."  Attach the files that you need to turn in.
