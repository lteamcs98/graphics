# Short Assignment #5:  Chalkboard \
Due: Friday, January 20

In this assignment, you will write a drawing program, a bit like MS
Paint or Adobe Photoshop.  But missing a few (read: most) of the
features.

Your program should open up a graphics window and allow the user to
use the mouse to draw on a simulated chalkboard.  If the mouse button
is released, the user should be able to move the mouse pointer around
without drawing anything.  If the mouse button is pressed down, the
board is drawn on using the current chalk color.

The board should be black.  The color should initially be white.  If
the user presses the *r* key, then the current chalk color should
change to red, and everything drawn after this should be red, until
another color key is pressed.  Likewise, use *b* for blue, *g* for
green, and *y* for yellow (form yellow by full red and full green).
Also, pressing *e* makes the chalk "color" black, which erases
anything you draw over.

You can add other colors if you like, but you do not need to.  For
fun, I added orange (*o* key, full red and half green) and purple (*p*
key, quarter red and half blue).  I also added a feature where if you
press *E*, then the entire chalkboard is erased and the chalk color
becomes white; you don't have to add this feature, but it's easy to
add.

Here is a picture I drew with the program I wrote:

![](my_house.png)

## Suggestions

1. Call `clear` after you set the clear color to black at the
beginning.

2. Make a while-loop that runs as long as the window is open.  Each
iteration does the following:

    a. Calls `draw_line` to trace out the chalk on the board, *but
only if the mouse button is pressed*.  You should draw a line from
where the mouse most recently was to where it is now.  That means
you'll want to create state variables to remember where the mouse was
most recently; I called mine `old_x` and `old_y`.

    b. Checks to see whether a key is pressed.  If so, then it changes
the stroke color depending on which key is pressed.  An if-ladder is
good to use here.

    c. Updates the state variables to remember the mouse location.

    d. Calls `request_redraw`.

    e. Sleeps for 1/50 (one-fiftieth) of a second.

3. I found a stroke width of 2 pixels to be reasonable.  I also called
`enable_smoothing` to make the drawing look a little better.

4. Start with a simple version of the program.  In your first version,
don't worry about the keys and changing colors.  Once you have
everything working, you can add the capability to draw colors.

## What to turn in

1. Turn in a screenshot of something you drew with your program,
demonstrating at least four different colors.

2. Turn in your .py source code listing.

At this point, you know how to turn in short assignments, so I don't
need to provide the instructions.
