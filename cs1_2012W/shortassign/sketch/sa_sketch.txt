# Short assignment 2:  Sketch \
Due: Wednesday, January 11

## Green Eggs and Ham

The goal of this assignment is to familiarize you with the CS1
graphics library (or **module** as it is called in Python).  This
library contains functions that draw shapes to a window on your
computer.  To get you comfortable with `cs1lib`, we are sending you to
kindergarten&mdash;that time of blocks, snack time, glue (which
sometimes was snack time), and most relevantly, drawing.

You will create an illustration inspired by the cover of a book that
is required reading at Dartmouth: Dr. Seuss's *Green Eggs and Ham*.
You will draw a triangular plate containing two eggs with green yolks,
green ham, and a fork.  Like any self-respecting artiste, you will
also sign your work.

Here's mine:
				   
![](green-eggs-ham.png)

You don't have to draw it exactly as I did, but you are required to
have at least the following elements.  (You may include more if you
like.)

* A red background.
* A white, triangular plate with a black outline.
* Two eggs, with black outlines and green yolks.  The yolks should not
  have an outline.
* Green ham with a white bone in the center.  Neither the ham nor the
  bone should have an outline.
* A blue fork with four tines ("tine" is another word for one of the
  prongs of a fork), sticking up vertically from the green ham.  The
  tines should be centered horizontally around the handle of the fork.
* Your name in the lower left of the window, in black.

When you draw the plate, the egg whites, and the fork, use a stroke
width of two pixels.  When you draw the egg whites and the ham, draw
them as ellipses.  An ellipse has two radii: one horizontal and one
vertical.  When you draw the egg yolks and the ham bone, draw them as
circles.

Your program should define the following six functions, and each one
will need to be called at least one time somewhere in your program:

* `set_fill_white` sets the fill color to white.
* `set_fill_green` sets the fill color to green.
* `set_stroke_blue` sets the stroke color to blue.
* `set_stroke_black` sets the stroke color to black.
* `make_background_red` makes the background red.
* `draw_green_eggs_and_ham` makes the entire drawing.

The stroke color is the color that outlines of filled objects (such as
circles, ellipses, triangles, and rectangles) are drawn in.  It's also
the color that lines are drawn in.

The first five of the above functions are simple.  In fact, you should
be able to write the bodies of each of the first four in one line, and
you should be able to write the body of `make_background_red` in two
lines.

Most of the action will be in the `draw_green_eggs_and_ham` function.
I found it to be a really good idea to define some variables for the
locations of various points in the fork, and then I could do some
simple arithmetic to draw the tines.  But I'll leave it to you how to
write the code to draw everything, as long as you define and use the
above six functions correctly.

Of course, you'll want to import functions from `cs1lib`, and you'll
want to have `start_graphics` call `draw_green_eggs_and_ham`.  But you
need to know about some functions from `cs1lib`, so here are the ones
that you'll find useful.  I'll give example calls for those you have
not seen in lecture.

* `set_fill_color`: As we saw in lecture, this function takes three
  parameters that give the fraction of red, green, and blue in the
  fill color for filled objects, such as ellipses, circles, triangles,
  and rectangles.  This fill color is in effect until the next call of
  `set_fill_color`.

* `set_stroke_color`: This function is like `set_fill_color`, except
  that it gives the stroke color.  Example: `set_stroke_color(1, 0,
  1)` makes the stroke color magenta.

* `set_clear_color`: This function is like `set_fill_color`, except
  that it gives the color that the background will appear the next
  time you call `clear`.  Example: 'set_clear_color(1, 0, 1)` makes
  the background color magenta.

* `clear`: As we saw in lecture, this parameterless function clears
  the graphics window.  And now you know that it also sets the
  background color to the color given in a previous call to
  `set_clear_color`.

* `set_stroke_width`: This function takes one parameter, which is the
  number of pixels for each stroke's width.  Like `set_fill_color` and
  `set_stroke_color`, it remains in effect until the next call of
  `set_stroke_width`.  Example: `set_stroke_width(4)` makes strokes be
  four pixels wide.

* `draw_triangle`: As we saw in lecture, this function draws a
  triangle whose vertices (i.e., corners) are given in the six
  parameters.  The first two parameters give the coordinates of the
  first vertex, the next two parameters give the coordinates of the
  second vertex, and the last two parameters give the coordinates of
  the third vertex.

* `draw_circle`: As we saw in lecture, this function draws a circle.
  It takes three parameters.  The first two give the *x*- and
  *y*-coordinates of the circle's center, and the third parameter
  gives the circle's radius, in pixels.

* `draw_ellipse`: This function is like `draw_circle`, except that it
  draws an ellipse and takes four parameters, not three.  The first
  two are like `draw_circle`'s first two: the coordinates of the
  center.  The third parameter is the ellipse's horizontal radius, and
  the fourth parameter is the ellipse's vertical radius.  Example:
  `draw_ellipse(100, 200, 50, 25)` draws an ellipse centered at (100,
  200).  Its topmost point is at (100, 150), its bottommost point is
  at (100, 250), its leftmost point is at (75, 200), and its rightmost
  point is at (125, 200).

* `enable_stroke`: This parameterless function makes it so that when
  you draw an object with an outline or when you draw a line, the
  outline or line appears.  Example: `enable_stroke()`.

* `disable_stroke`: This parameterless function makes it so that when
  you draw an object with an outline or when you draw a line, the
  outline or line does not appear.  Example: `disable_stroke()`.

* `draw_line`: This function takes four parameters and draws a line.
  The first two parameters give the *x*- and *y*-coordinates of one
  endpoint of the line, and the second two parameters give the
  coordinates of the other endpoint.  Example: `draw_line(100, 200,
  150, 300)` draws a line between the points (100, 200) and (150,
  300).

* `draw_text`: This function takes three parameters and draws a text
  string.  The first parameter is the text string to draw.  (Remember
  to enclose it in quotes if it's a string literal.)  The last two
  parameters say where to draw the text string, giving the *x*- and
  *y*-coordinates of where the lower left pixel of the first character
  should appear.  Example: `draw_text("CS 1 is wicked awesome", 50,
  100)` draws the text `CS 1 is wicked awesome`, with the lower left
  corner of the "`C`" at (50, 100).

The goal of this assignment is for you to learn to use `cs1lib`, so we
are less interested in your drawing and more interested in your code.
Remember that style counts&mdash;a lot!

* Organize logically.
* Use whitespace to make your code pretty, and use comments to make
  your code comprehensible to wetware.
* Write at least the six functions that you are required to write.
* If you make variables, choose meaningful names for them, and use
  them consistently.  For example, if you make a variable `fork_top`
  for the *y*-coordinate of the top of the fork's handle, and you give
  it the value 100, then use `fork_top` everywhere that you want the
  *y*-coordinate of the top of the fork's handle; don't use `fork_top`
  in some of these places and 100 in other places where you mean the
  *y*-coodinate of the top of the fork's handle.
* Put a header comment at the top of the file that has the file's
  name, your name, the date, the course, and a short description of
  what the program does.
* Be consistent with style.  There are few hard and fast style rules,
  meaning you have freedom regarding many style choices, but apply
  those decisions consistently.

### Helpful hints:

* Your **canvas**&mdash;the window in which you draw&mdash;is 400 by
  400 pixels with (0, 0) in the upper left corner and (400, 400) in
  the lower right.

* This website is useful to find RGB values for colors:
  [http://www.colorschemedesigner.com/](http://www.colorschemedesigner.com)
  .  Specifically, look at the percent values below and to the left of
  the color wheel and convert them to floating point values.  For
  instance, RGB values of 7%, 27%, 67% would translate to
  `set_fill_color(.07, .27, .67)`.  You don't have to use this
  website, however, since you can form all the colors I'm asking for
  with parameter values of 0 and 1 in calls to `set_fill_color`,
  `set_stroke_color`, and `set_clear_color`.

* Python draws shapes in the order you tell it to, so the order of
  your code will affect how your shapes overlay each other.

* Try creating the objects one at a time, then seeing how you like the
  result after creating each one.  That way, if you don't like where
  you put an object, or you don't like how it looks, you can fix it
  before you create and place the next one.  I also suggest creating
  them from back to front, so first make the red background, then the
  white, triangular plate, etc.  I recommend making the fork last,
  because it has the most intricate code.

Have fun, even if you don't like green eggs and ham, and even if your
name is Sam.

## What to turn in

There are two things you need to turn in:

1. drawing.py (or whatever you called the program you wrote to draw
your picture.)

2. A screenshot of your drawing, in whatever popular image format you
prefer (.tiff, .png, .bmp, .jpg, etc).

Please remember in all assignments that editing the output of the
program before printing it is a violation of the Academic Honor
Principle.  Make sure that the output you turn in comes from the
program that you turn in.  If you make any change to the code, no
matter how insignificant you think it might be&mdash;even if you're
just adding or editing comments&mdash;rerun your program to produce
new output.

## How to turn in your assignment

You have a section leader.  That section leader has a special e-mail
account

cs1-xxx@cs.dartmouth.edu

where xxx will be replaced with your section leader's first name.  So
for example, if your section leader is Bertha, then e-mail
cs1-bertha@cs.dartmouth.edu.  You can find this email account in the
Recitation Sections area on the course [Blackboard
site](https://blackboard.dartmouth.edu/).

Send your section leader an e-mail with the title "Short assignment 2
submission."  Attach the two files that you need to turn in.
